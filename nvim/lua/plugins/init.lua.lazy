local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

local plugins = {
  -- local local_use = function(first, second, opts)
  --   opts = opts or {}
  --
  --   local plug_path, home
  --   if second == nil then
  --     plug_path = first
  --     home = "aymen"
  --   else
  --     plug_path = second
  --     home = first
  --   end
  --
  --   if vim.fn.isdirectory(vim.fn.expand("~/Documents/git/projects/" .. plug_path)) == 1 then
  --     opts[1] = "~/Documents/git/projects/" .. plug_path
  --   else
  --     opts[1] = string.format("%s/%s", home, plug_path)
  --   end
  --
  --   use(opts)
  -- end

  "nvim-lua/plenary.nvim",
  "lewis6991/impatient.nvim",
  -- config = function()
  --   require("impatient").enable_profile()
  -- end
  -- "wbthomason/packer.nvim",
  -- opt = true,
  -- cmd = utils.packer_cmds
  "nvim-lua/popup.nvim",
  "rcarriga/nvim-notify",
  -- event = "BufRead",
  -- config = function()
  --   require("plugins.configs.notify")
  -- end
  "moll/vim-bbye",

  "akinsho/toggleterm.nvim",
  -- tag = '*',
  -- config = function()
  --   require('plugins.configs.toggleterm')
  -- end,
  -- cmd = { "ToggleTerm", "TermExec" }

  {
    "kyazdani42/nvim-tree.lua",
    dependencies = { "kyazdani42/nvim-web-devicons" }
  },
  -- requires = "kyazdani42/nvim-web-devicons",
  -- cmd = { "NvimTreeToggle", "NvimTreeOpen" },
  -- config = function()
  --   require("plugins.configs.nvim-tree")
  -- end

  {
  "nvim-lualine/lualine.nvim",
    -- event = "BufRead",
    config = function()
      require("plugins.configs.lualine")
    end
  },

  {
  "akinsho/bufferline.nvim",
    -- opt = true,
    -- event = "BufRead",
    config = function()
      require("plugins.configs.bufferline")
    end
  },

  "j-hui/fidget.nvim",
  -- config = function()
  --   require("fidget").setup {
  --     text = {
  --       spinner = "star",
  --       done = "ï˜³"
  --     }
  --   }
  --   vim.api.nvim_create_autocmd("VimLeavePre", { command = [[silent! FidgetClose]] })
  -- end,
  -- after = "nvim-lspconfig"

  {
    "nvim-treesitter/nvim-treesitter",
    dependencies = { "nvim-treesitter/nvim-treesitter-textobjects", "nvim-treesitter/playground" }
  },
  --   requires = {
  --     "nvim-treesitter/nvim-treesitter-textobjects",
  --     {
  --       "nvim-treesitter/playground",
  --       cmd = { "TSPlayground", "TSHighlightCapturesUnderCursor" }
  --     }
  --   },
  --   event = { "BufRead", "BufWinEnter", "BufNewFile" },
  --   run = ":TSUpdate",
  --   config = function()
  --     require("plugins.configs.treesitter")
  --   end

  "lewis6991/gitsigns.nvim",
  --   ft = "gitcommit",
  --   event = "BufRead",
  --   config = function()
  --     require("gitsigns").setup()
  --   end

  "numToStr/Comment.nvim",
  -- keys = { "gc", "gb" },
  -- config = function()
  --   require("Comment").setup()
  -- end,

  "kylechui/nvim-surround",
  -- event = "BufReadPre",
  -- config = function()
  --   require("nvim-surround").setup()
  -- end,

  "windwp/nvim-autopairs",
  -- event = "InsertEnter",
  -- config = function()
  --   require("nvim-autopairs").setup()
  -- end,

  {
    "nvim-telescope/telescope.nvim",
    -- dependencies = { { "nvim-telescope/telescope-ui-select.nvim" },
    --   { "nvim-telescope/telescope-fzf-native.nvim", run = "make" }
    -- }
  },
  -- requires = {
  --   "nvim-telescope/telescope-ui-select.nvim",
  --   { "nvim-telescope/telescope-fzf-native.nvim", run = "make" },
  -- },
  -- config = function()
  --   require("ah.telescope")
  -- end,

  -- use {
  --   "Pocco81/true-zen.nvim",
  --   cmd = { "TZAtaraxis", "TZMinimalist" },
  --   config = function()
  --     require("plugins.configs.zen")
  --   end
  -- }

  "folke/zen-mode.nvim",
  -- config = function()
  --   require("plugins.configs.zen")
  -- end

  "ixru/nvim-markdown",
  -- ft = "markdown"

  "iamcco/markdown-preview.nvim",
  -- run = function()
  --   vim.fn["mkdp#util#install"]()
  -- end,
  -- ft = "markdown",
  -- cmd = { "MarkdownPreview" }

  "tpope/vim-scriptease",
  -- cmd = {
  --   "Messages",
  --   "Verbose"
  -- }


  -- use {
  --   "karb94/neoscroll.nvim",
  --   config = function ()
  --     require("plugins.configs.neoscroll")
  --   end
  -- }

  -- lsp stuff --

  "williamboman/nvim-lsp-installer",
  -- event = "BufRead",

  {
  "neovim/nvim-lspconfig",
  -- opt = true,
  -- after = "nvim-lsp-installer",
    config = function()
      require("ah.lsp")
    end
  },
  -- requires = {
  --   {
  -- "SmiteshP/nvim-navic",
  --     config = function()
  --       require("plugins.configs.navic")
  --     end,
  --     module = { "nvim-navic" },
  --   },
  -- },

  -- cmp --

  "hrsh7th/nvim-cmp",
  -- event = { "InsertEnter", "CmdlineEnter" },
  -- config = function()
  --   require("plugins.configs.cmp")
  -- end,
  -- after = "nvim-lspconfig"

  "hrsh7th/cmp-nvim-lsp",
  -- after = "nvim-cmp"

  "hrsh7th/cmp-buffer",
  -- after = "nvim-cmp"

  "hrsh7th/cmp-path",
  -- after = "nvim-cmp"

  "hrsh7th/cmp-cmdline",
  -- after = "nvim-cmp"

  "quangnguyen30192/cmp-nvim-ultisnips",
  -- after = "nvim-cmp",
  -- ft = { "tex", "markdown "}

  "SirVer/ultisnips",
  -- after = "nvim-cmp",

  "brymer-meneses/grammar-guard.nvim",

  "nanotee/luv-vimdocs",
  "milisims/nvim-luaref",

  "jupyter-vim/jupyter-vim",
  -- ft = "python"

  -- colourschemes --

  "catppuccin/nvim",
  "embark-theme/vim",
  'AlexvZyl/nordic.nvim',
  'Mofiqul/vscode.nvim',
  'navarasu/onedark.nvim',

  -- use "aymenhafeez/tokyonight.nvim"
  -- local_use "tokyonight.nvim"
  "folke/tokyonight.nvim",

  "aymenhafeez/neodark.nvim",
  -- local_use "neodark.nvim"

  "aymenhafeez/OxfDictionary.nvim",
  -- local_use "OxfDictionary.nvim"

  -- use {
  "aymenhafeez/scratch.vim",
  --   cmd = {"Scratch", "Sscratch" }
  -- }
  -- local_use "scratch.vim"

  -- use "aymenhafeez/vim-line-motion"
  -- local_use "vim-line-motion"
}

local opts = {}

require("lazy").setup(plugins, opts)
